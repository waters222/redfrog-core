# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
# require 'yaml'
# ip_addr=""
# ip_setting_file = {"ip" => ip_addr}
# if File.exist? '.vagrant/ip_setting.yaml'
#   ip_setting_file = YAML.load_file('.vagrant/ip_setting.yaml')
#   ip_addr = ip_setting_file['ip']
# end
$nat_script = <<-NAT_SCRIPT
ulimit -Hn 1048576
ulimit -Sn 1048576

sudo sysctl -w net.ipv4.ip_forward=1



export INTERFACE_IN=eth0
export INTERFACE_OUT=eth1

sudo iptables -t filter --flush INPUT
sudo iptables -t filter -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
sudo iptables -t filter -A INPUT -p udp --dport 53 -j ACCEPT

sudo iptables -t filter --flush FORWARD
sudo iptables -t filter -A FORWARD -i $INTERFACE_IN -o $INTERFACE_OUT -j ACCEPT
sudo iptables -t filter -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

sudo iptables -t nat --flush POSTROUTING
sudo iptables -t nat -A POSTROUTING -o $INTERFACE_OUT   -j MASQUERADE


sudo ip rule add fwmark 0x1/0x1 lookup 100
sudo ip route add local 0.0.0.0/0 dev lo table 100

sudo sysctl -w net.ipv6.conf.all.forwarding=1

sudo ip6tables -t filter --flush INPUT
sudo ip6tables -t filter -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
sudo ip6tables -t filter -A INPUT -p udp --dport 53 -j ACCEPT

sudo ip6tables -t filter --flush FORWARD
sudo ip6tables -t filter -A FORWARD -i $INTERFACE_IN -o $INTERFACE_OUT -j ACCEPT
sudo ip6tables -t filter -A FORWARD -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT

sudo ip6tables -t nat --flush POSTROUTING
sudo ip6tables -t nat -A POSTROUTING -o $INTERFACE_OUT   -j MASQUERADE

sudo ip -6 rule add fwmark 0x1/0x1 lookup 100
sudo ip -6 route add local ::/128 dev lo table 100

NAT_SCRIPT


$gw_scrirpt = <<-GW_SCRIPT
sudo ip route del default
sudo ip route add default via 192.168.0.1
GW_SCRIPT

Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  # config.vm.box = "ubuntu/bionic64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   apt-get update
  #   apt-get install -y apache2
  # SHELL
  # config.vm.box = "ubuntu/bionic64"
  # config.vm.hostname = "gateway"
  # config.vm.network "private_network", ip: "10.0.2.20"
  # gateway.vm.network "public_network", ip: "10.0.0.52"
  # gateway.vm.provision "shell",
  #   run: "always",
  #   inline: "route add default gw 10.0.0.1"
  # gateway.vm.provision "shell",
  #   run: "always",
  #   inline: "eval `route -n | awk '{ if ($8 ==\"eth0\" && $2 != \"0.0.0.0\") print \"route del default gw \" $2; }'`"
  # config.vm.synced_folder "../../../../../", "/home/vagrant/map"

  config.vm.define "gateway" do |gateway|


    # if ip_addr.length == 0
    #   print "Please enter public ip address for gateway\n"
    #   ip_addr = STDIN.gets.chomp
    #   print "Using ip address " + ip_addr + " for public interface\n"      
    #   ip_setting_file = {'ip'=>ip_addr}
    #   File.open('.vagrant/ip_setting.yaml', 'w+') {|f| f.write(ip_setting_file.to_yaml) }
    # end 
    gateway.vm.box = "ubuntu/bionic64"
    gateway.vm.hostname = "gateway"
    gateway.vm.network "private_network", ip: "192.168.0.1" , virtualbox__intnet: "mynet"
    gateway.vm.network "public_network", ip: "10.0.0.52"
    gateway.vm.network "forwarded_port", guest: 40000, host: 40000
    gateway.vm.provision "shell", inline: $nat_script
    gateway.vm.provider "virtualbox" do |v|
      v.memory = 512
      v.cpus = 1
    end
    #gateway.vm.network "public_network", ip: ip_addr
    # gateway.vm.network "public_network", ip: "10.0.0.52"
    # gateway.vm.provision "shell",
    #   run: "always",
    #   inline: "route add default gw 10.0.0.1"
    # gateway.vm.provision "shell",
    #   run: "always",
    #   inline: "eval `route -n | awk '{ if ($8 ==\"eth0\" && $2 != \"0.0.0.0\") print \"route del default gw \" $2; }'`"
    gateway.vm.synced_folder "../../../../../", "/home/vagrant/map"
  end
  config.vm.define "client" do |client|
    client.vm.box = "ubuntu/bionic64"
    client.vm.hostname = "client"
    client.vm.network "private_network", ip: "192.168.0.10", virtualbox__intnet: "mynet"
    client.vm.provision "shell", inline: $gw_scrirpt
    client.vm.provider "virtualbox" do |v|
      v.memory = 512
      v.cpus = 1
    end
    # client.vm.provision "shell",
    #   run: "always",
    #   inline: "eval `route -n | awk '{ if ($8 ==\"eth0\" && $2 != \"0.0.0.0\") print \"route del default gw \" $2; }'`"
    client.vm.synced_folder "../../../../../", "/home/vagrant/map"
  end
end
